datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Define the Account model
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Organization {
  orgId        String   @id @default(uuid())
  userId       String
  name         String
  companyEmail String   @db.Text
  companyPhone String
  address      String
  city         String
  zipCode      String
  state        String
  country      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Define the Session model
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Define the User model
model User {
  id            String         @id @default(uuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  organization  Organization[]
}

// Define the Customer model
model Customer {
  id        Int       @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  address   String?
  createdAt DateTime  @default(now())
  Invoice   Invoice[]
}

// Define the Product model
model Product {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  price       Float
  taxRate     Float
  createdAt   DateTime      @default(now())
  InvoiceItem InvoiceItem[]
}

// Define the Invoice model
model Invoice {
  id          Int           @id @default(autoincrement())
  customer    Customer      @relation(fields: [customerId], references: [id])
  customerId  Int
  totalAmount Float
  dueDate     DateTime
  isPaid      Boolean       @default(false)
  paidDate    DateTime?
  createdAt   DateTime      @default(now())
  // Define the relation to InvoiceItem
  items       InvoiceItem[]
  Payment     Payment[]
}

// Define the InvoiceItem model
model InvoiceItem {
  id        Int     @id @default(autoincrement())
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  unitPrice Float
}

// Define the Payment model
model Payment {
  id          Int      @id @default(autoincrement())
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId   Int
  amount      Float
  paymentDate DateTime
  method      String
  createdAt   DateTime @default(now())
}
