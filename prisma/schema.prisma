datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Define the Account model
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Organization {
  orgId        String     @id @default(uuid())
  userId       String
  name         String
  gstno        String
  companyEmail String     @db.Text
  companyPhone String
  address      String
  city         String
  zipCode      String
  state        String
  country      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  customers    Customer[]
  products     Product[]
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Define the Session model
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Define the User model
model User {
  id            String         @id @default(uuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  organizations Organization[]
}

// Define the Customer model
model Customer {
  id             String       @id @default(uuid())
  organizationId String
  name           String
  gstno          String
  email          String?
  phone          String?
  baddress       String?
  saddress       String?
  createdAt      DateTime     @default(now())
  Invoice        Invoice[]
  organization   Organization @relation(fields: [organizationId], references: [orgId], onDelete: Cascade)
}

// Define the Product model
model Product {
  id             String        @id @default(uuid())
  organizationId String
  name           String
  price          Float
  taxRate        Float
  unit           String
  hsnCode        String
  createdAt      DateTime      @default(now())
  InvoiceItem    InvoiceItem[]
  organization   Organization  @relation(fields: [organizationId], references: [orgId], onDelete: Cascade)
}

// Define the Invoice model
model Invoice {
  id             String        @id @default(uuid())
  invoiceNo      Int           @unique
  organizationId String
  customer       Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId     String
  totalAmount    Float
  invDate        DateTime
  dueDate        DateTime
  isPaid         Boolean       @default(false)
  paidDate       DateTime?
  createdAt      DateTime      @default(now())
  // Define the relation to InvoiceItem
  items          InvoiceItem[]
}

// Define the InvoiceItem model
model InvoiceItem {
  id        String  @id @default(uuid())
  invoiceId String
  productId String
  quantity  Int
  unitPrice Float
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
